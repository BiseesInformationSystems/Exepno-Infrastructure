apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
stringData:
  openmetadata-mysql-password: "openmetadata_password"
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
data:
  openmetadata-airflow-password: {{ b64enc .Values.openmetadataDependencies.secrets.openmetadataAirflowPassword | quote }}
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-mysql-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
stringData:
  airflow-mysql-password: "airflow_pass"
---
{{/*
apiVersion: v1
kind: Secret
metadata:
  name: github
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
data:
  username: {{ b64enc .Values.openmetadataDependencies.secrets.github_username | quote }}
  token: {{ b64enc .Values.openmetadataDependencies.secrets.github_token | quote }}
---
*/}}
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-jira-auth
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
stringData:
  username: "jira"
  password: {{ quote .Values.jira.global.postgresql.auth.password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-confluence-auth
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
stringData:
  username: "confluence"
  password: {{ quote .Values.confluence.global.postgresql.auth.password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "exepno-infrastructure.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "exepno-infrastructure.labels" . | nindent 4 }}
type: Opaque
stringData:
  monitoring.yaml: |
    alertmanager:
      alertmanagerSpec:
        image:
          registry: {{ .Values.monitoring.alertmanager.alertmanagerSpec.image.registry }}
          repository: {{ .Values.monitoring.alertmanager.alertmanagerSpec.image.repository }}
          tag: {{ .Values.monitoring.alertmanager.alertmanagerSpec.image.tag }}
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: {{ .Values.monitoring.alertmanager.alertmanagerSpec.storage.storageClassName }}
              resources:
                requests:
                  storage: {{ .Values.monitoring.alertmanager.alertmanagerSpec.storage.storage }}
    prometheusOperator:
      admissionWebhooks:
        patch:
          image:
            registry: {{ .Values.monitoring.prometheusOperator.admissionWebhooks.patch.image.registry }}
            repository: {{ .Values.monitoring.prometheusOperator.admissionWebhooks.patch.image.repository }}
            tag: {{ .Values.monitoring.prometheusOperator.admissionWebhooks.patch.image.tag }}
      image:
        registry: {{ .Values.monitoring.prometheusOperator.image.registry }}
        repository: {{ .Values.monitoring.prometheusOperator.image.repository }}
        tag: {{ .Values.monitoring.prometheusOperator.image.tag }}
      prometheusConfigReloader:
        image:
          registry: {{ .Values.monitoring.prometheusOperator.prometheusConfigReloader.image.registry }}
          repository: {{ .Values.monitoring.prometheusOperator.prometheusConfigReloader.image.repository }}
          tag: {{ .Values.monitoring.prometheusOperator.prometheusConfigReloader.image.tag }}
    prometheus:
      prometheusSpec:
        image:
          registry: {{ .Values.monitoring.prometheus.prometheusSpec.image.registry }}
          repository: {{ .Values.monitoring.prometheus.prometheusSpec.image.repository }}
          tag: {{ .Values.monitoring.prometheus.prometheusSpec.image.tag }}
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: {{ .Values.monitoring.prometheus.prometheusSpec.storageSpec.storageClassName }}
              resources:
                requests:
                  storage: {{ .Values.monitoring.prometheus.prometheusSpec.storageSpec.storage }}
    grafana:
      image:
        repository: {{ .Values.monitoring.grafana.image.repository }}
        tag: {{ .Values.monitoring.grafana.image.tag }}
      testFramework:
        image: {{ .Values.monitoring.grafana.testFramework.image }}
        tag: {{ .Values.monitoring.grafana.testFramework.tag }}
      downloadDashboardsImage:
        repository: {{ .Values.monitoring.grafana.downloadDashboardsImage.repository }}
        tag: {{ .Values.monitoring.grafana.downloadDashboardsImage.tag }}
      initChownData:
        image:
          repository: {{ .Values.monitoring.grafana.initChownData.image.repository }}
          tag: {{ .Values.monitoring.grafana.initChownData.image.tag }}
      sidecar:
        image:
          repository: {{ .Values.monitoring.grafana.sidecar.image.repository }}
          tag: {{ .Values.monitoring.grafana.sidecar.image.tag }}
      ingress:
        hosts:
          - {{ .Values.ingress.grafana_host }}
        tls:
          - secretName: "grafana-tls"
            hosts:
              - {{ .Values.ingress.grafana_host }}
      persistence:
        storageClassName: {{ .Values.monitoring.grafana.persistence.storageClassName }}
        size: {{ .Values.monitoring.grafana.persistence.size }}
    prometheus-node-exporter:
      image:
        repository: {{ .Values.monitoring.prometheusNodeExporter.image.repository }}
        tag: {{ .Values.monitoring.prometheusNodeExporter.image.tag }}
    kube-state-metrics:
      image:
        repository: {{ .Values.monitoring.kubeStateMetrics.image.repository }}
        tag: {{ .Values.monitoring.kubeStateMetrics.image.tag }}

  postgresql.yaml: |
    global:
      postgresql:
        auth:
          password: {{ default "d7Gae3vsXKlsX83v" .Values.postgresql.global.postgresql.auth.password }}
          postgresPassword: {{ default "eQ80vtsK5F54Wl9d" .Values.postgresql.global.postgresql.auth.postgresPassword }}
          username: {{ .Values.postgresql.global.postgresql.auth.username }}
          database: {{ .Values.postgresql.global.postgresql.auth.database }}
    metrics:
      serviceMonitor:
        namespace: {{ .Release.Namespace }}
    primary:
      persistence:
        storageClass: {{ .Values.postgresql.global.postgresql.persistence.storageClass }}
        size: {{ .Values.postgresql.global.postgresql.persistence.size }}

  jenkins.yaml: |
    controller:
      image: {{ .Values.jenkins.controller.image }}
      tag: {{ .Values.jenkins.controller.tag }}
      sidecars:
        configAutoReload:
          image: {{ .Values.jenkins.controller.sidecars.configAutoReload.image }}
      prometheus:
        serviceMonitorNamespace: {{ .Release.Namespace }}
        prometheusRuleNamespace: {{ .Release.Namespace }}
      adminPassword: {{ default "MZxb6bNOgc2uhz02" .Values.jenkins.controller.adminPassword }}
      ingress:
        hostName: {{ .Values.ingress.jenkins_host }}
        tls:
          - secretName: "jenkins-tls"
            hosts:
              - {{ .Values.ingress.jenkins_host }}
    agent:
      image: {{ .Values.jenkins.agent.image }}
      tag: {{ .Values.jenkins.agent.tag }}
    helmtest:
      bats:
        image: {{ .Values.jenkins.helmtest.bats.image }}
        tag: {{ .Values.jenkins.helmtest.bats.tag }}
    serviceAccountAgent:
      name: {{ .Values.jenkins.serviceAccountAgent.name }}
    persistence:
      storageClass: {{ .Values.jenkins.persistence.storageClass }}
      size: {{ .Values.jenkins.persistence.size }}

  argocd.yaml: |
    global:
      image:
        repository: {{ .Values.argocd.global.image.repository }}
        tag: {{ .Values.argocd.global.image.tag }}
    dex:
      image:
        repository: {{ .Values.argocd.dex.image.repository }}
        tag: {{ .Values.argocd.dex.image.tag }}
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
    redis:
      image:
        repository: {{ .Values.argocd.redis.image.repository }}
        tag: {{ .Values.argocd.redis.image.tag }}
      exporter:
        image:
          repository: {{ .Values.argocd.redis.exporter.image.repository }}
          tag: {{ .Values.argocd.redis.exporter.image.tag }}
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
    server:
      extensions:
        image:
          repository: {{ .Values.argocd.server.extensions.image.repository }}
          tag: {{ .Values.argocd.server.extensions.image.tag }}
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
      ingress:
        hosts:
          - {{ .Values.ingress.argocd_host }}
        tls:
          - secretName: argocd-tls
            hosts:
              - {{ .Values.ingress.argocd_host }}
    controller:
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
    repoServer:
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
    applicationSet:
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}
    notifications:
      metrics:
        serviceMonitor:
          namespace: {{ .Release.Namespace }}

  nfs-server.yaml: |
    image:
      repository: {{ .Values.nfs.image.repository }}
      tag: {{ .Values.nfs.image.tag }}
    persistence:
      storageClass: {{ .Values.nfs.persistence.storageClass }}
      size: {{ .Values.nfs.persistence.size }}

  openmetadata-dependencies.yaml: |
    airflow:
      airflow:
        image:
          repository: asaifee02/ingestion
          tag: 1.0.3
        variables:
          - key: CRAWL_OUTPUT_BUCKET
            value: {{ default "airflow-dags" .Values.openmetadataDependencies.airflow.airflow.crawlOutputBucket }}
        config:
          AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: "gs://{{ default "airflow-logs" .Values.openmetadataDependencies.airflow.airflow.logsOutputBucket }}/logs"
          AIRFLOW__WEBSERVER__BASE_URL: "https://{{ .Values.ingress.airflow_host }}"
        users:
          - username: "admin"
            password: {{ quote .Values.openmetadataDependencies.secrets.openmetadataAirflowPassword }}
            email: {{ default "airflow@test.com" .Values.openmetadataDependencies.airflow.airflow.adminEmail }}
            role: "Admin"
            firstName: {{ default "Airflow" .Values.openmetadataDependencies.airflow.airflow.adminFirstName }}
            lastName: {{ default "Admin" .Values.openmetadataDependencies.airflow.airflow.adminLastName }}
      dags:
        persistence:
          size: {{ .Values.openmetadataDependencies.airflow.dags.persistence.size }}
        gitSync:
          image:
            repository: {{ .Values.openmetadataDependencies.airflow.dags.gitSync.image.repository }}
            tag: {{ .Values.openmetadataDependencies.airflow.dags.gitSync.image.tag }}
          repo: {{ .Values.openmetadataDependencies.airflow.dags.gitSync.repo }}
      pgbouncer:
        image:
          repository: {{ .Values.openmetadataDependencies.airflow.pgbouncer.image.repository }}
          tag: {{ .Values.openmetadataDependencies.airflow.pgbouncer.image.tag }}
      serviceAccount:
        annotations:
          iam.gke.io/gcp-service-account: {{ .Values.openmetadataDependencies.secrets.saEmail }}
      ingress:
        web:
          host: {{ .Values.ingress.airflow_host }}
    mysql:
      image:
        registry: {{ .Values.openmetadataDependencies.mysql.image.registry }}
        repository: {{ .Values.openmetadataDependencies.mysql.image.repository }}
        tag: {{ .Values.openmetadataDependencies.mysql.image.tag }}
      auth:
        rootPassword: {{ default "1b3Ejx8FE8huF0r3" .Values.openmetadataDependencies.mysql.auth.rootPassword }}
    mysql:
      primary:
        persistence:
          storageClass: {{ .Values.openmetadataDependencies.mysql.persistence.storageClass }}
          size: {{ .Values.openmetadataDependencies.mysql.persistence.size }}
    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch
      imageTag: 7.10.2
      volumeClaimTemplate:
        storageClassName: {{ .Values.openmetadataDependencies.elasticsearch.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.openmetadataDependencies.elasticsearch.persistence.storage }}

  openmetadata.yaml: |
    image:
      repository: {{ .Values.openmetadata.image.repository }}
      tag: {{ .Values.openmetadata.image.tag }}
    openmetadata:
      config:
        jwtTokenConfiguration:
          jwtissuer: {{ .Values.ingress.openmetadata_host }}
        pipelineServiceClientConfig:
          apiEndpoint: "https://{{ .Values.ingress.airflow_host }}:443"
          metadataApiEndpoint: "https://{{ .Values.ingress.openmetadata_host }}:443/api"
        authentication:
          publicKeys:
            - "https://{{ .Values.ingress.openmetadata_host }}/api/v1/system/config/jwks"
          authority: "https://{{ .Values.ingress.openmetadata_host }}"
    ingress:
      hosts:
        - host: {{ .Values.ingress.openmetadata_host }}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: "openmetadata-tls"
          hosts:
            - {{ .Values.ingress.openmetadata_host }}

  eck-operator.yaml: |
    # eck-operator image
            image:
              repository: {{ .Values.eck.operator.image.repository }}
              tag: {{ .Values.eck.operator.image.tag }}

  eck-stack.yaml: |
    # eck-stack images
            - name: eck-elasticsearch.image
              value: '{{ .Values.eck.elasticsearch.image }}'
            - name: eck-elasticsearch.nodeSets[0].volumeClaimTemplates[0].spec.storageClassName
              value: '{{ .Values.eck.elasticsearch.persistence.storageClassName }}'
            - name: eck-elasticsearch.nodeSets[0].volumeClaimTemplates[0].spec.resources.requests.storage
              value: '{{ .Values.eck.elasticsearch.persistence.storage }}'
            - name: eck-kibana.spec.image
              value: '{{ .Values.eck.kibana.image }}'
            - name: eck-beats.spec.image
              value: '{{ .Values.eck.metricbeat.image }}'
            - name: eck-elasticsearch.nodeSets[0].count
              value: '{{ .Values.eck.elasticsearch.count }}'

  eck-filebeat.yaml: |
    # eck-filebeat image
              image: '{{ .Values.eck.filebeat.image }}'

  eck-ingress.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: eck
      namespace: {{ .Release.Namespace }}
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
    spec:
      ingressClassName: nginx
      tls:
        - secretName: eck-tls
          hosts:
            - {{ .Values.ingress.kibana_host }}
      rules:
      - host: {{ .Values.ingress.kibana_host }}
        http:
          paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: kibana-kb-http
                port: 
                  name: http

  jira_postgresql.yaml: |
    global:
      postgresql:
        auth:
          password: {{ default "35QBW0KK9l06SW2k" .Values.jira.global.postgresql.auth.password }}
          postgresPassword: {{ default "8YfSOSZa3bJTHG69" .Values.jira.global.postgresql.auth.postgresPassword }}
    image:
      registry: {{ .Values.jira.global.postgresql.image.registry }}
      repository: {{ .Values.jira.global.postgresql.image.repository }}
      tag: {{ .Values.jira.global.postgresql.image.tag }}
    volumePermissions:
      image:
        registry: {{ .Values.jira.global.postgresql.volumePermissions.image.registry }}
        repository: {{ .Values.jira.global.postgresql.volumePermissions.image.repository }}
        tag: {{ .Values.jira.global.postgresql.volumePermissions.image.tag }}
    metrics:
      image:
        registry: {{ .Values.jira.global.postgresql.metrics.image.registry }}
        repository: {{ .Values.jira.global.postgresql.metrics.image.repository }}
        tag: {{ .Values.jira.global.postgresql.metrics.image.tag }}
      serviceMonitor:
        namespace: {{ .Release.Namespace }}
    primary:
      persistence:
        storageClass: {{ .Values.jira.global.postgresql.persistence.storageClass }}
        size: {{ .Values.jira.global.postgresql.persistence.size }}

  jira.yaml: |
    {{/*
    # image:
    #   repository: {{ .Values.jira.image.repository }}
    #   tag: {{ .Values.jira.image.tag }}
    */}}
    volumes:
      localHome:
        persistentVolumeClaim:
          storageClassName: {{ .Values.jira.persistence.storageClassName }}
          resources:
            requests:
              storage: {{ .Values.jira.persistence.storage }}
      sharedHome:
        persistentVolumeClaim:
          resources:
            requests:
              storage: {{ .Values.jira.persistence.sharedStorage }}
        nfsPermissionFixer:
          imageRepo: {{ .Values.jira.nfsPermissionFixer.imageRepo }}
          imageTag: {{ .Values.jira.nfsPermissionFixer.imageTag }}
    replicaCount: {{ .Values.jira.replicaCount }}
    ingress:
      host: {{ .Values.ingress.jira_host }}

  confluence_postgresql.yaml: |
    global:
      postgresql:
        auth:
          password: {{ default "bY7K3rsMWw2k6SjW" .Values.confluence.global.postgresql.auth.password }}
          postgresPassword: {{ default "VQv1Fjh9qtxQMk1I" .Values.confluence.global.postgresql.auth.postgresPassword }}
    image:
      registry: {{ .Values.confluence.global.postgresql.image.registry }}
      repository: {{ .Values.confluence.global.postgresql.image.repository }}
      tag: {{ .Values.confluence.global.postgresql.image.tag }}
    volumePermissions:
      image:
        registry: {{ .Values.confluence.global.postgresql.volumePermissions.image.registry }}
        repository: {{ .Values.confluence.global.postgresql.volumePermissions.image.repository }}
        tag: {{ .Values.confluence.global.postgresql.volumePermissions.image.tag }}
    metrics:
      image:
        registry: {{ .Values.confluence.global.postgresql.metrics.image.registry }}
        repository: {{ .Values.confluence.global.postgresql.metrics.image.repository }}
        tag: {{ .Values.confluence.global.postgresql.metrics.image.tag }}
      serviceMonitor:
        namespace: {{ .Release.Namespace }}
    primary:
      persistence:
        storageClass: {{ .Values.confluence.global.postgresql.persistence.storageClass }}
        size: {{ .Values.confluence.global.postgresql.persistence.size }}

  confluence.yaml: |
    {{/*
    # image:
    #   repository: {{ .Values.confluence.image.repository }}
    #   tag: {{ .Values.confluence.image.tag }}
    */}}
    volumes:
      localHome:
        persistentVolumeClaim:
          storageClassName: {{ .Values.confluence.persistence.storageClassName }}
          resources:
            requests:
              storage: {{ .Values.confluence.persistence.storage }}
      sharedHome:
        persistentVolumeClaim:
          resources:
            requests:
              storage: {{ .Values.confluence.persistence.sharedStorage }}
        nfsPermissionFixer:
          imageRepo: {{ .Values.confluence.nfsPermissionFixer.imageRepo }}
          imageTag: {{ .Values.confluence.nfsPermissionFixer.imageTag }}
    replicaCount: {{ .Values.confluence.replicaCount }}
    ingress:
      host: {{ .Values.ingress.confluence_host }}

  gitea.yaml: |
    image:
      registry: {{ .Values.gitea.image.registry }}
      repository: {{ .Values.gitea.image.repository }}
      tag: {{ .Values.gitea.image.tag }}
    test:
      image:
        name: {{ .Values.gitea.test.image.name }}
        tag: {{ .Values.gitea.test.image.tag }}
    ingress:
      hosts:
        - host: {{ .Values.ingress.gitea_host }}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: "gitea-tls"
          hosts:
            - {{ .Values.ingress.gitea_host }}
    gitea:
      config:
        APP_NAME: {{ quote .Values.gitea.config.APP_NAME }}
      admin:
        username: {{ .Values.gitea.admin.username }}
        password: {{ default "5ZpfX0yYB3AkDSqZ" .Values.gitea.admin.password }}
        email: {{ .Values.gitea.admin.email }}
    postgresql:
      global:
        postgresql:
          auth:
            password: {{ default "CyP4uUCLU5sHb9l0" .Values.gitea.postgresql.password }}
      image:
        registry: {{ .Values.gitea.postgresql.image.registry }}
        repository: {{ .Values.gitea.postgresql.image.repository }}
        tag: {{ .Values.gitea.postgresql.image.tag }}
      primary:
        persistence:
          storageClass: {{ .Values.gitea.postgresql.persistence.storageClass }}
          size: {{ .Values.gitea.postgresql.persistence.size }}
    memcached: 
      image:
        registry: {{ .Values.gitea.memcached.image.registry }}
        repository: {{ .Values.gitea.memcached.image.repository }}
        tag: {{ .Values.gitea.memcached.image.tag }}
    persistence:
      storageClass: {{ .Values.gitea.persistence.storageClass }}
      size: {{ .Values.gitea.persistence.size }}

  kubeshark.yaml: |
    license: {{ defaultalues.kubeshark.license }}
    tap:
      storagelimit: {{ .Values.kubeshark.storagelimit }}
      release:
        namespace: {{ .Release.Namespace }}
      docker:
        registry: {{ .Values.kubeshark.docker.registry }}
        tag: {{ .Values.kubeshark.docker.tag }}
      ingress:
        host: {{ .Values.ingress.kubeshark_host }}
        tls:
          - secretName: "kubeshark-tls"
            hosts:
              - {{ .Values.ingress.kubeshark_host }}
        auth:
          approveddomains: 
          {{- $domainList := split "," .Values.kubeshark.approveddomains -}}
          {{- range $domain := $domainList }}
            - {{ trim $domain | quote }}
          {{- end }}
